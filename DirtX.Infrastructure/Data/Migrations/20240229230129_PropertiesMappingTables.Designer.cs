// <auto-generated />
using System;
using DirtX.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DirtX.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240229230129_PropertiesMappingTables")]
    partial class PropertiesMappingTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.GearProperty", b =>
                {
                    b.Property<int>("GearId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("GearId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("GearsProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcyclePart", b =>
                {
                    b.Property<int>("MotorcycleId")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.HasKey("MotorcycleId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("MotorcyclesParts");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoDisplacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Displacement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MotoDisplacements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Displacement = 250
                        },
                        new
                        {
                            Id = 2,
                            Displacement = 300
                        },
                        new
                        {
                            Id = 3,
                            Displacement = 350
                        },
                        new
                        {
                            Id = 4,
                            Displacement = 450
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoMake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MotoMakes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Make = "Yamaha"
                        },
                        new
                        {
                            Id = 2,
                            Make = "Honda"
                        },
                        new
                        {
                            Id = 3,
                            Make = "Suzuki"
                        },
                        new
                        {
                            Id = 4,
                            Make = "Kawasaki"
                        },
                        new
                        {
                            Id = 5,
                            Make = "KTM"
                        },
                        new
                        {
                            Id = 6,
                            Make = "Husqvarna"
                        },
                        new
                        {
                            Id = 7,
                            Make = "GASGAS"
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MotoModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Model = "YZ-F"
                        },
                        new
                        {
                            Id = 2,
                            Model = "CRF"
                        },
                        new
                        {
                            Id = 3,
                            Model = "RM-Z"
                        },
                        new
                        {
                            Id = 4,
                            Model = "KX-F"
                        },
                        new
                        {
                            Id = 5,
                            Model = "SX-F"
                        },
                        new
                        {
                            Id = 6,
                            Model = "FC"
                        },
                        new
                        {
                            Id = 7,
                            Model = "MC-F"
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DisplacementId")
                        .HasColumnType("int");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisplacementId");

                    b.HasIndex("ModelId");

                    b.HasIndex("YearId");

                    b.HasIndex("MakeId", "ModelId", "YearId", "DisplacementId");

                    b.ToTable("Motorcycles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplacementId = 1,
                            MakeId = 1,
                            ModelId = 1,
                            YearId = 5
                        },
                        new
                        {
                            Id = 2,
                            DisplacementId = 4,
                            MakeId = 2,
                            ModelId = 2,
                            YearId = 15
                        },
                        new
                        {
                            Id = 3,
                            DisplacementId = 1,
                            MakeId = 3,
                            ModelId = 3,
                            YearId = 10
                        },
                        new
                        {
                            Id = 4,
                            DisplacementId = 1,
                            MakeId = 4,
                            ModelId = 4,
                            YearId = 11
                        },
                        new
                        {
                            Id = 5,
                            DisplacementId = 3,
                            MakeId = 5,
                            ModelId = 5,
                            YearId = 17
                        },
                        new
                        {
                            Id = 6,
                            DisplacementId = 4,
                            MakeId = 6,
                            ModelId = 6,
                            YearId = 13
                        },
                        new
                        {
                            Id = 7,
                            DisplacementId = 1,
                            MakeId = 7,
                            ModelId = 7,
                            YearId = 18
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MotoYears");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Year = 2005
                        },
                        new
                        {
                            Id = 2,
                            Year = 2006
                        },
                        new
                        {
                            Id = 3,
                            Year = 2007
                        },
                        new
                        {
                            Id = 4,
                            Year = 2008
                        },
                        new
                        {
                            Id = 5,
                            Year = 2009
                        },
                        new
                        {
                            Id = 6,
                            Year = 2010
                        },
                        new
                        {
                            Id = 7,
                            Year = 2011
                        },
                        new
                        {
                            Id = 8,
                            Year = 2012
                        },
                        new
                        {
                            Id = 9,
                            Year = 2013
                        },
                        new
                        {
                            Id = 10,
                            Year = 2014
                        },
                        new
                        {
                            Id = 11,
                            Year = 2015
                        },
                        new
                        {
                            Id = 12,
                            Year = 2016
                        },
                        new
                        {
                            Id = 13,
                            Year = 2017
                        },
                        new
                        {
                            Id = 14,
                            Year = 2018
                        },
                        new
                        {
                            Id = 15,
                            Year = 2019
                        },
                        new
                        {
                            Id = 16,
                            Year = 2020
                        },
                        new
                        {
                            Id = 17,
                            Year = 2021
                        },
                        new
                        {
                            Id = 18,
                            Year = 2022
                        },
                        new
                        {
                            Id = 19,
                            Year = 2023
                        },
                        new
                        {
                            Id = 20,
                            Year = 2024
                        },
                        new
                        {
                            Id = 21,
                            Year = 2025
                        },
                        new
                        {
                            Id = 22,
                            Year = 2026
                        },
                        new
                        {
                            Id = 23,
                            Year = 2027
                        },
                        new
                        {
                            Id = 24,
                            Year = 2028
                        },
                        new
                        {
                            Id = 25,
                            Year = 2029
                        },
                        new
                        {
                            Id = 26,
                            Year = 2030
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.OilProperty", b =>
                {
                    b.Property<int>("OilId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("OilId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("OilsProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.PartProperty", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("PartId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PartsProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Gear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Gears");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 6,
                            Description = "Premium motorcycle helmet for maximum protection.",
                            IsAvailable = true,
                            Price = 99.99m,
                            Size = 1,
                            StockQuantity = 5,
                            Title = "Helmet",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 7,
                            Description = "Durable protective jacket for safe riding.",
                            IsAvailable = true,
                            Price = 149.99m,
                            Size = 2,
                            StockQuantity = 7,
                            Title = "Protective Jacket",
                            Type = 1
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Oil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("PackageSize")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Oils");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 9,
                            Description = "Premium 2-stroke oil for motorcycle engines.",
                            IsAvailable = true,
                            PackageSize = 1.0,
                            Price = 28.99m,
                            StockQuantity = 30,
                            Title = "2T Cross Power",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 10,
                            Description = "Ester Core Premium 4-stroke oil for motorcycle engines.",
                            IsAvailable = true,
                            PackageSize = 1.0,
                            Price = 34.99m,
                            StockQuantity = 12,
                            Title = "300V 15W60 1L",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 10,
                            Description = "Ester Core Premium 4-stroke oil for motorcycle engines.",
                            IsAvailable = true,
                            PackageSize = 4.0,
                            Price = 114.99m,
                            StockQuantity = 3,
                            Title = "300V 10W40 4L",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            Description = "Lightweight fork oil for smoother suspension stroke.",
                            IsAvailable = true,
                            PackageSize = 0.5,
                            Price = 27.00m,
                            StockQuantity = 8,
                            Title = "Fork Oil 5W",
                            Type = 3
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 9,
                            Description = "Performance Line Oils Series is used by MXGP Factory teams.",
                            IsAvailable = true,
                            PackageSize = 0.75,
                            Price = 29.99m,
                            StockQuantity = 8,
                            Title = "Performance Line: Shock Oil",
                            Type = 3
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 19,
                            Description = "The baseline 4-stroke engine oil for motorcycles.",
                            IsAvailable = true,
                            PackageSize = 1.5,
                            Price = 26.29m,
                            StockQuantity = 14,
                            Title = "YAMALUBE 10W40",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 10,
                            Description = "The baseline 4-stroke engine oil for motorcycles.",
                            IsAvailable = true,
                            PackageSize = 1.0,
                            Price = 26.29m,
                            StockQuantity = 14,
                            Title = "MotoCool -35°C 1L",
                            Type = 4
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 17,
                            Description = "High-quality forged piston for 4-Stroke motorcycle engines. Rings and pin are included in the set.",
                            IsAvailable = true,
                            Price = 455.00m,
                            StockQuantity = 11,
                            Title = "High-Compression Forged Piston",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 18,
                            Description = "High-performance cast piston. Piston rings are not included.",
                            IsAvailable = true,
                            Price = 325.00m,
                            StockQuantity = 6,
                            Title = "Cast Piston",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 7,
                            Description = "Protective cover for motorcycle engines made of titanium.",
                            IsAvailable = true,
                            Price = 99.99m,
                            StockQuantity = 4,
                            Title = "Engine Clutch Cover",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 3,
                            Description = "Complete gasket set for top-end engine rebuilds and maintenance.",
                            IsAvailable = true,
                            Price = 89.99m,
                            StockQuantity = 31,
                            Title = "Top-End Gasket Set",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            Description = "Enhanced water pump cover for improved cooling efficiency.",
                            IsAvailable = true,
                            Price = 87.79m,
                            StockQuantity = 10,
                            Title = "Water Pump Cover",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 12,
                            Description = "High-flow fuel injector for increased horsepower, throttle response and fuel efficiency.",
                            IsAvailable = true,
                            Price = 289.99m,
                            StockQuantity = 3,
                            Title = "8-Point Fuel Injector",
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 17,
                            Description = "A set of two high-quality intake valves that exceed OEM quality.",
                            IsAvailable = true,
                            Price = 139.29m,
                            StockQuantity = 7,
                            Title = "Intake Valves Set",
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 18,
                            Description = "Electric fuel pump for replacing the old one. Comes with all necessary components.",
                            IsAvailable = true,
                            Price = 149.99m,
                            StockQuantity = 12,
                            Title = "Fuel Pump",
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 16,
                            Description = "Premium air filter for improved air flow and engine performance.",
                            IsAvailable = true,
                            Price = 24.49m,
                            StockQuantity = 27,
                            Title = "Air Filter",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 6,
                            Description = "High-quality oil filter for efficient filtration and engine longevity.",
                            IsAvailable = true,
                            Price = 10.99m,
                            StockQuantity = 19,
                            Title = "Oil Filter",
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 16,
                            Description = "High-quality oil filter for efficient filtration and engine longevity.",
                            IsAvailable = true,
                            Price = 54.29m,
                            StockQuantity = 8,
                            Title = "Aluminium Oil Filter Cap",
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 16,
                            Description = "Custom shaped adaptor for each model that fits securely under the gas cap, creating a leak-proof seal",
                            IsAvailable = true,
                            Price = 50.99m,
                            StockQuantity = 5,
                            Title = "Fuel Filter (Gas Tank)",
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 5,
                            Description = "Replacement brake pads offering reliable stopping performance.",
                            IsAvailable = true,
                            Price = 35.89m,
                            StockQuantity = 20,
                            Title = "Sintered Front Brake Pads",
                            Type = 3
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 11,
                            Description = "Comfortable and durable lever, made out of aluminium for improved control and comfort.",
                            IsAvailable = true,
                            Price = 71.99m,
                            StockQuantity = 14,
                            Title = "Aluminium Brake Lever",
                            Type = 3
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 11,
                            Description = "High-performance brake disc for superior stopping power.",
                            IsAvailable = true,
                            Price = 89.99m,
                            StockQuantity = 1,
                            Title = "Front Brake Disc",
                            Type = 3
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 11,
                            Description = "High-performance brake disc for superior stopping power.",
                            IsAvailable = true,
                            Price = 77.29m,
                            StockQuantity = 7,
                            Title = "Rear Brake Disc",
                            Type = 3
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 14,
                            Description = "Precision-engineered shock absorber for smooth ride experience.",
                            IsAvailable = true,
                            Price = 799.19m,
                            StockQuantity = 3,
                            Title = "Shock Absorber",
                            Type = 4
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 14,
                            Description = "Upgraded front fork springs for improved suspension response and handling. Set of two.",
                            IsAvailable = true,
                            Price = 429.99m,
                            StockQuantity = 5,
                            Title = "Front Fork Springs",
                            Type = 4
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 8,
                            Description = "Seal kit for motorcycle forks to prevent leaks and maintain suspension performance.",
                            IsAvailable = true,
                            Price = 44.99m,
                            StockQuantity = 18,
                            Title = "Fork Seal Kit",
                            Type = 4
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 8,
                            Description = "The latest KYB technology is used to develop this shock, used by Yamaha Factory Racing drivers.",
                            IsAvailable = true,
                            Price = 1404.49m,
                            StockQuantity = 2,
                            Title = "HI-C Shock Absorber",
                            Type = 4
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 14,
                            Description = "Designed as a drop-in replacement to upgrade OEM ball-type bearings to taper bearings.",
                            IsAvailable = true,
                            Price = 125.50m,
                            StockQuantity = 6,
                            Title = "Steering Stem Bearing Kit",
                            Type = 4
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 4,
                            Description = "Durable motorcycle chain for smooth power transfer.",
                            IsAvailable = true,
                            Price = 119.99m,
                            StockQuantity = 10,
                            Title = "114-Links Chain",
                            Type = 2
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 4,
                            Description = "Durable motorcycle chain for smooth power transfer.",
                            IsAvailable = true,
                            Price = 129.99m,
                            StockQuantity = 7,
                            Title = "120-Links Chain",
                            Type = 2
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 4,
                            Description = "Durable motorcycle chain for smooth power transfer.",
                            IsAvailable = true,
                            Price = 89.79m,
                            StockQuantity = 4,
                            Title = "52-Teeth Rear Sprocket",
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            BrandId = 4,
                            Description = "Durable motorcycle chain for smooth power transfer.",
                            IsAvailable = true,
                            Price = 24.19m,
                            StockQuantity = 13,
                            Title = "13-Teeth Front Sprocket",
                            Type = 2
                        },
                        new
                        {
                            Id = 26,
                            BrandId = 7,
                            Description = "Complete clutch kit for enhanced performance and durability.",
                            IsAvailable = true,
                            Price = 2149.99m,
                            StockQuantity = 3,
                            Title = "Complete Clutch Kit",
                            Type = 2
                        },
                        new
                        {
                            Id = 27,
                            BrandId = 17,
                            Description = "Complete clutch plate kit with friction plates and steel plates for smooth engagement.",
                            IsAvailable = true,
                            Price = 339.69m,
                            StockQuantity = 8,
                            Title = "Clutch Plate Kit",
                            Type = 2
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Alpinestars is an Italian motorsports and action sports safety equipment manufacturer based in Asolo, Italy.",
                            Name = "Alpinestars"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A leader in lubrication technology, Bel-Ray has engineered products to protect, while delivering superior business value for application in automotive, motorcycle, powersports, steel, textile and other industries.",
                            Name = "BEL-RAY"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Boyesen has captured the attention of Racing teams, leveraging their engineering and manufacturing mastery to create water pump covers and impellers, ignition and clutch covers.",
                            Name = "Boyesen"
                        },
                        new
                        {
                            Id = 4,
                            Description = "At D.I.D, our passion for motorcycles and commitment to excellence drives us to deliver the finest motorcycle chains in the industry.",
                            Name = "D.I.D"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Brand C",
                            Name = "Galfer"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Galfer USA is the leading manufacturer of performance braking systems and accessories for motorcycle enthusiasts and racers alike.",
                            Name = "HifloFiltro"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Hinson clutch components is the choice of most major factory teams and riders and has proven itself to be the best quality for many years.",
                            Name = "Hinson"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All KYB shock absorbers are designed to the highest standards and are manufactured in the same facilities that build shocks for new vehicle manufacturers.",
                            Name = "KYB Suspension"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Motorex is a Swiss family-owned company specializing in the development, production and marketing of lubricants, metalworking fluids, technical cleaning and care products.",
                            Name = "Motorex"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Founded in 1853, Motul is a French company with an international footprint specialized in the formulation, production, and distribution of high-performance lubricants for engines.",
                            Name = "MOTUL"
                        },
                        new
                        {
                            Id = 11,
                            Description = "At Moto-Master we are passionate about motorcycles and it is our mission to improve the riding experience of our customers by providing them with the best brake setup possible.",
                            Name = "Moto-Master"
                        },
                        new
                        {
                            Id = 12,
                            Description = "With over 80 years of automotive expertise, we are driven by extreme dedication to performance and quality. Our people push the boundaries of innovation to bring the latest technologies to market.",
                            Name = "NGK"
                        },
                        new
                        {
                            Id = 13,
                            Description = "O’NEAL (est. 1970) is a global leader in protective apparel and accessories.  For more than half a century O’NEAL has been designing and developing helmets, jerseys, pants, protectors, gloves, boots and much more.",
                            Name = "O'NEAL"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Showa is a brand of high-performance automotive, motorcycle and outboard suspension systems of Hitachi Astemo, based in Gyoda, Saitama in Japan.",
                            Name = "Showa"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Check out our latest Motocross outfits, backed by the top riders in the sport.",
                            Name = "THOR"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Twin Air produces air filters and oil filters as well as performance upgrades for all types of motorcycles, ATVs, Karts and RC products.",
                            Name = "Twin Air"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Vertex is considered the premier brand of OEM replacement pistons and is the OEM supplier to KTM and numerous European motorcycle and go-kart manufacturers.",
                            Name = "Vertex"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Wiseco was born 80 years ago from a passion for the performance and racing lifestyle and evolved from garage-made pistons to an industry leader in aftermarket performance.",
                            Name = "Wiseco"
                        },
                        new
                        {
                            Id = 19,
                            Description = "YAMALUBE is an engine oil developed in-house by Yamaha specifically for motorcycles.",
                            Name = "YAMALUBE"
                        });
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.GearSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GearId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GearId");

                    b.HasIndex("TitleId");

                    b.ToTable("GearSpecifications");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.OilSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OilId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OilId");

                    b.HasIndex("TitleId");

                    b.ToTable("OilSpecifications");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.PartSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("TitleId");

                    b.ToTable("PartSpecifications");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.SpecificationTitles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecificationTitles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.GearProperty", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Gear", "Gear")
                        .WithMany("GearProperties")
                        .HasForeignKey("GearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Properties.GearSpecification", "Spec")
                        .WithMany("GearProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gear");

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcyclePart", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.Motorcycle", "Motorcycle")
                        .WithMany("MotorcycleParts")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Part", "Part")
                        .WithMany("MotorcycleParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorcycle");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.Motorcycle", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoDisplacement", "Displacement")
                        .WithMany()
                        .HasForeignKey("DisplacementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoMake", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.MotoYear", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Displacement");

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.OilProperty", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Oil", "Oil")
                        .WithMany("OilProperties")
                        .HasForeignKey("OilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Properties.OilSpecification", "Spec")
                        .WithMany("OilProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oil");

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.PartProperty", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Part", "Part")
                        .WithMany("PartProperties")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Properties.PartSpecification", "Spec")
                        .WithMany("PartProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Gear", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.ProductBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Oil", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.ProductBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Part", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.ProductBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.GearSpecification", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Gear", "Gear")
                        .WithMany()
                        .HasForeignKey("GearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Properties.SpecificationTitles", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gear");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.OilSpecification", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Oil", "Oil")
                        .WithMany()
                        .HasForeignKey("OilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Properties.SpecificationTitles", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oil");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.PartSpecification", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.ProductModels.Properties.SpecificationTitles", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DirtX.Infrastructure.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.MotorcycleSpecs.Motorcycle", b =>
                {
                    b.Navigation("MotorcycleParts");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Gear", b =>
                {
                    b.Navigation("GearProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Oil", b =>
                {
                    b.Navigation("OilProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Part", b =>
                {
                    b.Navigation("MotorcycleParts");

                    b.Navigation("PartProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.GearSpecification", b =>
                {
                    b.Navigation("GearProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.OilSpecification", b =>
                {
                    b.Navigation("OilProperties");
                });

            modelBuilder.Entity("DirtX.Infrastructure.Data.Models.ProductModels.Properties.PartSpecification", b =>
                {
                    b.Navigation("PartProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
