// <auto-generated />
using System;
using DirtX.Scraper.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DirtX.Scraper.Migrations
{
    [DbContext(typeof(ScraperDbContext))]
    [Migration("20240415222458_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DirtX.Scraper.Data.Models.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("DirtX.Scraper.Data.Models.Motorcycle", b =>
                {
                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Each announcement link is unique, therefore used as a key");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasComment("Date of announcement's addition to the database");

                    b.Property<int>("Displacement")
                        .HasColumnType("int")
                        .HasComment("Motorcycle's engine displacement in cubic centimeters");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit")
                        .HasComment("Keeps track whether the motorcycle has been sold");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price's value before it was changed");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Motorcycle's actual price");

                    b.Property<int>("PriceChanges")
                        .HasColumnType("int")
                        .HasComment("Announcement's number of price changes");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Link");

                    b.HasIndex("MakeId");

                    b.HasIndex("YearId");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("DirtX.Scraper.Data.Models.MotorcycleMarketPrice", b =>
                {
                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<decimal>("AvgPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Average Price for each make/year combination");

                    b.Property<decimal>("MeanTrimPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Mean Price for each make/year combination, calculated with a trim factor of 0.20");

                    b.Property<decimal>("MedianPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Median Price for each make/year combination");

                    b.Property<decimal>("ModePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Mode Price (most frequent value, if such exists) for each make/year combination");

                    b.Property<int>("MotoCount")
                        .HasColumnType("int")
                        .HasComment("The number of motorcycle announcements for the current make/year combination");

                    b.Property<decimal>("PriceRange")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Price Range (most expensive - cheapest announcement) for each make/year combination");

                    b.Property<decimal>("PriceVariance")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Price Variance coefficient for each make/year combination");

                    b.Property<decimal>("StdDevPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Standard Deviation Price for each make/year combination");

                    b.HasKey("MakeId", "YearId");

                    b.HasIndex("YearId");

                    b.ToTable("MarketPrices");
                });

            modelBuilder.Entity("DirtX.Scraper.Data.Models.SoldMotorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cc")
                        .HasColumnType("int")
                        .HasComment("Motorcycle's engine displacement");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasComment("Date of announcement's addition to the database");

                    b.Property<DateTime>("DateSold")
                        .HasColumnType("datetime2")
                        .HasComment("Date of announcement's removal from the website");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Motorcycle's price");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MakeId");

                    b.HasIndex("YearId");

                    b.ToTable("SoldMotorcycles");
                });

            modelBuilder.Entity("DirtX.Scraper.Data.Models.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("DirtX.Scraper.Data.Models.Motorcycle", b =>
                {
                    b.HasOne("DirtX.Scraper.Data.Models.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Scraper.Data.Models.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DirtX.Scraper.Data.Models.MotorcycleMarketPrice", b =>
                {
                    b.HasOne("DirtX.Scraper.Data.Models.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Scraper.Data.Models.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("DirtX.Scraper.Data.Models.SoldMotorcycle", b =>
                {
                    b.HasOne("DirtX.Scraper.Data.Models.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirtX.Scraper.Data.Models.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");

                    b.Navigation("Year");
                });
#pragma warning restore 612, 618
        }
    }
}
